{
  "_args": [
    [
      {
        "raw": "encoding-down",
        "scope": null,
        "escapedName": "encoding-down",
        "name": "encoding-down",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\PC de Elya\\Desktop\\ECE ING5\\Asynch server tech\\AsynchGIT\\MondayNode\\TP3"
    ]
  ],
  "_from": "encoding-down@latest",
  "_id": "encoding-down@5.0.4",
  "_inCache": true,
  "_location": "/encoding-down",
  "_nodeVersion": "10.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/encoding-down_5.0.4_1529668938612_0.4047434367383642"
  },
  "_npmUser": {
    "name": "ralphtheninja",
    "email": "ralphtheninja@riseup.net"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "encoding-down",
    "scope": null,
    "escapedName": "encoding-down",
    "name": "encoding-down",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/encoding-down/-/encoding-down-5.0.4.tgz",
  "_shasum": "1e477da8e9e9d0f7c8293d320044f8b2cd8e9614",
  "_shrinkwrap": null,
  "_spec": "encoding-down",
  "_where": "C:\\Users\\PC de Elya\\Desktop\\ECE ING5\\Asynch server tech\\AsynchGIT\\MondayNode\\TP3",
  "bugs": {
    "url": "https://github.com/level/encoding-down/issues"
  },
  "dependencies": {
    "abstract-leveldown": "^5.0.0",
    "inherits": "^2.0.3",
    "level-codec": "^9.0.0",
    "level-errors": "^2.0.0",
    "xtend": "^4.0.1"
  },
  "description": "LevelDOWN wrapper supporting levelup@1 encodings",
  "devDependencies": {
    "level-community": "^3.0.0",
    "memdown": "^3.0.0",
    "remark-cli": "^5.0.0",
    "remark-git-contributors": "^0.2.1",
    "remark-github": "^7.0.3",
    "safe-buffer": "^5.1.1",
    "standard": "^11.0.0",
    "tape": "^4.8.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8CIZLDcSKxgzT+zX8ZVfgNbu8Md2wq/iqa1Y7zyVR18QBEAc0Nmzuvj/N5ykSKpfGzjM8qxbaFntLPwnVoUhZw==",
    "shasum": "1e477da8e9e9d0f7c8293d320044f8b2cd8e9614",
    "tarball": "https://registry.npmjs.org/encoding-down/-/encoding-down-5.0.4.tgz",
    "fileCount": 9,
    "unpackedSize": 29815,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbLOVKCRA9TVsSAnZWagAAYhAP/2pIEphEcGV0Yr4+0uDl\ncn7TJxuQRQciopJBb0krO2I8DSgPwcimOtOzdIajYeU5ff19HbybMgubgqG9\n4v2CxLuB+im3MGnTUzzQOt7cPwGO/lVyj9Hu1HCTHDSyAW++Te4d2RBEokuw\nh+ZzZRv3ZO0SJQ6EvDH1UShKYPT/w+n+Zh1Z00oOxZM7zQT4zZj2/PU1EJ8c\nd0NjnMhquk+XfQtZ4sWcxX4qnxijt0bRomU3Y4e5raiBxvRC62qsb3/bXNoJ\nW/pQATSXn537XlbgKdDnyNwuKcU7F6N78+Jy88VETR6kP6DodAPLWtjuI7Eo\nvw37x+dN9QUqoB06xe8ee/9NJTuX6rIiuXKvw+DUQ4mWbXxGRUf0zJKp8ZtF\n3pZoqO7SxnQ2C44zo2PlpBD7zAA7DBwXtTbInVrx7SbXINRmNyT6AC2TVoEY\nJrs43kfA/FcGCHMylgL7my8k+B9taMnO+J/1S9qeL/suQOf5Qa2ivN+2ZPux\nXxN58K9+xA8VqwXIRvvG73ONr+Ee1strs+TajPTj4D3Cw2djsF1/yjb9FR7M\n/eGR8c09+4GfHFoRQgQQ68Iv46vNyZXR2ElqzYKcQF+mQgaPOV8tbGs+UUPL\nWnk3tQDx9lTZSZULAy1iAUb8fwSsDqQAQ0SGzVZNJgNzGW7zY+zmRmOkEdUS\nWQrb\r\n=gTYF\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "gitHead": "6db1b8138b1b0856219cf85b80272fc034decbc1",
  "homepage": "https://github.com/level/encoding-down#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "juliangruber",
      "email": "julian@juliangruber.com"
    },
    {
      "name": "ralphtheninja",
      "email": "ralphtheninja@riseup.net"
    },
    {
      "name": "vweevers",
      "email": "dev@vincentweevers.nl"
    }
  ],
  "name": "encoding-down",
  "optionalDependencies": {},
  "readme": "# encoding-down\n\n> An [`abstract-leveldown`] implementation that wraps another store to encode keys and values.\n\n[![level badge][level-badge]](https://github.com/level/awesome)\n[![npm](https://img.shields.io/npm/v/encoding-down.svg)](https://www.npmjs.com/package/encoding-down)\n![Node version](https://img.shields.io/node/v/encoding-down.svg)\n[![Travis](https://travis-ci.org/Level/encoding-down.svg?branch=master)](https://travis-ci.org/Level/encoding-down)\n[![david](https://david-dm.org/Level/encoding-down.svg)](https://david-dm.org/level/encoding-down)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![npm](https://img.shields.io/npm/dm/encoding-down.svg)](https://www.npmjs.com/package/encoding-down)\n\n## Introduction\n\nStores like [`leveldown`] can only store strings and Buffers. For a richer set of data types you can wrap such a store with `encoding-down`. It allows you to specify an _encoding_ to use for keys and values independently. This not only widens the range of input types, but also limits the range of output types. The encoding is applied to all read and write operations: it encodes writes and decodes reads.\n\n[Many encodings are builtin][builtin-encodings] courtesy of [`level-codec`]. The default encoding is `utf8` which ensures you'll always get back a string. You can also provide a custom encoding like `bytewise` - [or your own](#custom-encodings)!\n\n## Usage\n\nWithout any options, `encoding-down` defaults to the `utf8` encoding.\n\n```js\nconst levelup = require('levelup')\nconst leveldown = require('leveldown')\nconst encode = require('encoding-down')\n\nconst db = levelup(encode(leveldown('./db1')))\n\ndb.put('example', Buffer.from('encoding-down'), function (err) {\n  db.get('example', function (err, value) {\n    console.log(typeof value, value) // 'string encoding-down'\n  })\n})\n```\n\nCan we store objects? Yes!\n\n```js\nconst db = levelup(encode(leveldown('./db2'), { valueEncoding: 'json' }))\n\ndb.put('example', { awesome: true }, function (err) {\n  db.get('example', function (err, value) {\n    console.log(value) // { awesome: true }\n    console.log(typeof value) // 'object'\n  })\n})\n```\n\nHow about storing Buffers, but getting back a hex-encoded string?\n\n```js\nconst db = levelup(encode(leveldown('./db3'), { valueEncoding: 'hex' }))\n\ndb.put('example', Buffer.from([0, 255]), function (err) {\n  db.get('example', function (err, value) {\n    console.log(typeof value, value) // 'string 00ff'\n  })\n})\n```\n\nWhat if we previously stored binary data?\n\n```js\nconst db = levelup(encode(leveldown('./db4'), { valueEncoding: 'binary' }))\n\ndb.put('example', Buffer.from([0, 255]), function (err) {\n  db.get('example', function (err, value) {\n    console.log(typeof value, value) // 'object <Buffer 00 ff>'\n  })\n\n  // Override the encoding for this operation\n  db.get('example', { valueEncoding: 'base64' }, function (err, value) {\n    console.log(typeof value, value) // 'string AP8='\n  })\n})\n```\n\nAnd what about keys?\n\n```js\nconst db = levelup(encode(leveldown('./db5'), { keyEncoding: 'json' }))\n\ndb.put({ awesome: true }, 'example', function (err) {\n  db.get({ awesome: true }, function (err, value) {\n    console.log(value) // 'example'\n  })\n})\n```\n\n```js\nconst db = levelup(encode(leveldown('./db6'), { keyEncoding: 'binary' }))\n\ndb.put(Buffer.from([0, 255]), 'example', function (err) {\n  db.get('00ff', { keyEncoding: 'hex' }, function (err, value) {\n    console.log(value) // 'example'\n  })\n})\n```\n\n## Usage with [`level`]\n\nThe [`level`] module conveniently bundles `encoding-down` and passes its `options` to `encoding-down`. This means you can simply do:\n\n```js\nconst level = require('level')\nconst db = level('./db7', { valueEncoding: 'json' })\n\ndb.put('example', 42, function (err) {\n  db.get('example', function (err, value) {\n    console.log(value) // 42\n    console.log(typeof value) // 'number'\n  })\n})\n```\n\n## API\n\n### `const db = require('encoding-down')(db[, options])`\n\n-   `db` must be an [`abstract-leveldown`] compliant store\n-   `options` are passed to [`level-codec`]&#x3A;\n    -   `keyEncoding`: encoding to use for keys\n    -   `valueEncoding`: encoding to use for values\n\nBoth encodings default to `'utf8'`. They can be a string (builtin `level-codec` encoding) or an object (custom encoding).\n\n## Custom encodings\n\nPlease refer to [`level-codec` documentation][encoding-format] for a precise description of the format. Here's a quick example with `level` and `async/await` just for fun:\n\n```js\nconst level = require('level')\nconst lexint = require('lexicographic-integer')\n\nasync function main () {\n  const db = level('./db8', {\n    keyEncoding: {\n      type: 'lexicographic-integer',\n      encode: (n) => lexint.pack(n, 'hex'),\n      decode: lexint.unpack,\n      buffer: false\n    }\n  })\n\n  await db.put(2, 'example')\n  await db.put(10, 'example')\n\n  // Without our encoding, the keys would sort as 10, 2.\n  db.createKeyStream().on('data', console.log) // 2, 10\n}\n\nmain()\n```\n\nWith an npm-installed encoding (modularity ftw!) we can reduce the above to:\n\n```js\nconst level = require('level')\nconst lexint = require('lexicographic-integer-encoding')('hex')\n\nconst db = level('./db8', {\n  keyEncoding: lexint\n})\n```\n\n## License\n\n[MIT](./LICENSE.md) Â© 2017-present `encoding-down` [Contributors](./CONTRIBUTORS.md).\n\n[level-badge]: http://leveldb.org/img/badge.svg\n\n[`abstract-leveldown`]: https://github.com/level/abstract-leveldown\n\n[`leveldown`]: https://github.com/level/leveldown\n\n[`level`]: https://github.com/level/level\n\n[`level-codec`]: https://github.com/level/codec\n\n[builtin-encodings]: https://github.com/level/codec#builtin-encodings\n\n[encoding-format]: https://github.com/level/codec#encoding-format\n",
  "readmeFilename": "README.md",
  "remarkConfig": {
    "plugins": [
      [
        "remark-git-contributors",
        "level-community"
      ],
      [
        "remark-github"
      ]
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/level/encoding-down.git"
  },
  "scripts": {
    "remark": "remark README.md CONTRIBUTORS.md CHANGELOG.md UPGRADING.md -o",
    "test": "standard && node test"
  },
  "version": "5.0.4"
}
